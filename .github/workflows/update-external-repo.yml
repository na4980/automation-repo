name: Update External Repository

on:
  workflow_dispatch:
    inputs:
      target_owner:
        description: 'Target repository owner'
        required: true
        default: 'tokamak-network'
      target_repo:
        description: 'Target repository name'
        required: true
        default: 'trh-sdk'
      update_message:
        description: 'Update message'
        required: true
        default: 'Automated update'

jobs:
  update-external-repo:
    runs-on: ubuntu-latest
    permissions: write-all
    
    steps:
      - name: Setup variables
        id: vars
        run: |
          branch_name="automation-update-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Setup authentication with custom PAT
        env:
          # 🔑 새로운 Secret 이름 사용 (GITHUB_TOKEN과 충돌 방지)
          MY_PERSONAL_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
        run: |
          echo "🔐 Setting up custom PAT authentication..."
          
          # PAT 존재 확인
          if [ -z "$MY_PERSONAL_TOKEN" ]; then
            echo "❌ MY_PERSONAL_TOKEN secret not found!"
            echo ""
            echo "Please create a new repository secret:"
            echo "1. Go to: Settings → Secrets and variables → Actions"
            echo "2. Click: New repository secret"
            echo "3. Name: MY_PERSONAL_TOKEN"
            echo "4. Secret: [Your GitHub PAT starting with ghp_]"
            exit 1
          fi
          
          # PAT 유효성 확인
          echo "Testing PAT validity..."
          if curl -s -H "Authorization: Bearer $MY_PERSONAL_TOKEN" https://api.github.com/user | jq -r '.login' | grep -v null; then
            echo "✅ PAT is valid"
          else
            echo "❌ PAT is invalid or expired"
            echo "Please generate a new PAT with 'public_repo' scope"
            exit 1
          fi
          
          # GitHub CLI 인증 (기본 토큰 제거)
          gh auth logout 2>/dev/null || true
          echo "$MY_PERSONAL_TOKEN" | gh auth login --with-token
          
          # Git 설정
          git config --global user.name "na4980"
          git config --global user.email "na4980@users.noreply.github.com"
          git config --global credential.helper store
          echo "https://x-access-token:$MY_PERSONAL_TOKEN@github.com" > ~/.git-credentials
          
          echo "✅ Authentication setup completed"

      - name: Verify authentication
        env:
          MY_PERSONAL_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
        run: |
          echo "🔍 Verifying authentication..."
          
          # GitHub CLI 상태 확인
          gh auth status
          
          # API 직접 테스트
          user=$(curl -s -H "Authorization: Bearer $MY_PERSONAL_TOKEN" https://api.github.com/user | jq -r '.login')
          echo "Authenticated as: $user"
          
          # 저장소 접근 테스트
          echo "Testing repository access..."
          gh repo view ${{ github.event.inputs.target_owner }}/${{ github.event.inputs.target_repo }}

      - name: Ensure fork exists
        env:
          MY_PERSONAL_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
        run: |
          echo "🍴 Managing fork..."
          
          if gh repo view ${{ github.repository_owner }}/${{ github.event.inputs.target_repo }} >/dev/null 2>&1; then
            echo "✅ Fork already exists"
          else
            echo "Creating fork..."
            gh repo fork ${{ github.event.inputs.target_owner }}/${{ github.event.inputs.target_repo }} --clone=false
            sleep 10
          fi

      - name: Clone and update repository
        env:
          MY_PERSONAL_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
        run: |
          echo "📥 Cloning and updating repository..."
          
          # 클론
          rm -rf trh-sdk_fork
          git clone https://x-access-token:$MY_PERSONAL_TOKEN@github.com/${{ github.repository_owner }}/${{ github.event.inputs.target_repo }}.git trh-sdk_fork
          cd trh-sdk_fork
          
          # upstream 설정
          git remote add upstream https://github.com/${{ github.event.inputs.target_owner }}/${{ github.event.inputs.target_repo }}.git
          git fetch upstream
          git checkout -b ${{ steps.vars.outputs.branch_name }} upstream/main
          
          # 파일 수정
          mkdir -p config
          echo '{"updated":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","message":"${{ github.event.inputs.update_message }}"}' > config/automation_config.json
          
          # 커밋
          git add .
          git commit -m "🤖 Automated update: ${{ github.event.inputs.update_message }}"
          
          # 푸시
          git push https://x-access-token:$MY_PERSONAL_TOKEN@github.com/${{ github.repository_owner }}/${{ github.event.inputs.target_repo }}.git ${{ steps.vars.outputs.branch_name }}

      - name: Create Pull Request
        env:
          MY_PERSONAL_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
        run: |
          echo "📝 Creating pull request..."
          
          gh pr create \
            --repo ${{ github.event.inputs.target_owner }}/${{ github.event.inputs.target_repo }} \
            --title "🤖 Automated update: ${{ github.event.inputs.update_message }}" \
            --body "Automated update from na4980/automation-repo" \
            --base main \
            --head ${{ github.repository_owner }}:${{ steps.vars.outputs.branch_name }}